1. Instale o poetry: pip install poetry

2. Entre no diretório do projeto e digite: poetry init

3. Confirme as próximas etapas e será criado o arquivo pyproject.toml

4. Em seguida use o comando: poetry install
    Ele criará um ambiente virtual parecido com o python -m venv venv

5. Instale o django: poetry add django

6. Acesse o ambiente virtual do poetry: poetry shell

7. Inicie o projeto django: django-admin startproject nome-projeto .

8. Em settings.py recomenda-se ler um pouco a documentação:
    https://docs.djangoproject.com/en/5.0/topics/settings/
    https://docs.djangoproject.com/en/5.0/ref/settings/

    É recomendado trocar a SECRET_KEY

9. Execute o comando: python manage.py migrate
    Isso criará o banco de dados e a página de admin já estará disponível em localhost:8000/admin

10. Crie um super usuário: python manage.py createsuperuser

11. Crie um app: python manage.py startapp core. E em setting adicione o app core

12. Em core, crie essa view:
    from django.http import HttpResponse

    def teste(request):
        return HttpResponse('Olá, mundo do Django')

13. Em livraria/urls.py adicione a rota para a view teste:
    Importe a view: 
        from core import views
    E no array urlpatterns inclua a rota para teste:
        .
        .
        path('teste/',views.teste)
14. Crie uma nova view teste2 e adicione uma rota para essa também.

15. Agora vá até core/models e crie as classes Categoria, Editora, Autor e Livro:

from django.db import models
from django.contrib.auth.models import User

# Create your models here.
class Categoria(models.Model):
    descricao = models.CharField(max_length=255)
    
    def __str__(self):
        return self.descricao

class Editora(models.Model):
    nome = models.CharField(max_length=255)
    site = models.URLField()
    
    def __str__(self):
        return self.nome
    
class Autor(models.Model):
    class Meta:
        verbose_name_plural = "autores"
        
    nome = models.CharField(max_length=255)
    
    def __str__(self):
        return self.nome

class Livro(models.Model):
    
    titulo = models.CharField(max_length=255)
    ISBN = models.CharField(max_length=32)
    quantidade = models.IntegerField(default=1)
    preco = models.FloatField(default=1.0)
    categoria = models.ForeignKey(Categoria, on_delete=models.PROTECT, related_name="livros", default=1)
    editora = models.ForeignKey(Editora, on_delete=models.PROTECT, related_name="livros",default=1)
    autores = models.ManyToManyField(Autor, related_name="livros")
    
    def __str__(self):
        return "%s (%s)" %(self.titulo, self.editora)

class Compra(models.Model):
    
    class StatusCompra(models.IntegerChoices):
        CARRINHO = 1, 'Carrinho'
        REALIZADO = 2, 'Realizado'
        PAGO = 3, 'Pago'
        ENTREGUE = 4, 'Entregue'
        
    usuario = models.ForeignKey(User, on_delete=models.PROTECT, related_name="compras") 
    status = models.IntegerField(choices=StatusCompra.choices, default=StatusCompra.CARRINHO)
    
class ItensCompra(models.Model):
    compra = models.ForeignKey(Compra, on_delete=models.CASCADE, related_name="itens")   
    livro = models.ForeignKey(Livro, on_delete=models.PROTECT, related_name="+")
    quantidade = models.IntegerField()    

    


16. Execute o comando: python manage.py makemigrations
17. Em seguida execute o comando: python manage.py migrate

18. Em admin.py registre esses modelos de dados para ficarem visíveis em localhost/admin:

from django.contrib import admin
from core.models import Autor, Categoria, Compra, Editora, Livro, ItensCompra

# Register your models here.
admin.site.register(Autor)
admin.site.register(Categoria)
admin.site.register(Editora)
admin.site.register(Livro)

class ItensInline(admin.TabularInline):
    model = ItensCompra

@admin.register(Compra)
class CompraAdmin(admin.ModelAdmin):
    inlines = (ItensInline,)

19. Para a apresentação do nome plural correto(ou como você quiser) na tela do admin,
    use uma meta classe dentro da classe model que você deseja alterar:

        class Autor(models.Model):
            class Meta:
                verbose_name_plural = "autores"
            .
            .
            .    

20. Exportar dados do banco de dados no formato json
Vá em views.py e importe as bibliotecas View, Categoria e json e crie a classe CategoriaView
o código deverá ficar assim:

    from django.http import HttpResponse
    from django.views import View
    from core.models import Categoria

    import json

    def teste(request):
        return HttpResponse('Olá, mundo do Django')

    def teste2(request):
        return HttpResponse('Página 2')

    class CategoriaView(View):
        def get(self, request):
            data = list(Categoria.objects.values())
            formated_data = json.dumps(data, ensure_ascii=False)
            return HttpResponse(formated_data, content_type="application/json")
    
    Em urls.py inclua o caminho:
            path('categorias/',views.CategoriaView.as_view())
    
    Teste a url /categorias. Deverá retornar os registros no banco de dados no formato json

21. Uso do postman para testes de API
    
    Métodos HTTP:
        GET: Buscar as informações
        POST: Criar uma nova informação
        PUT: Alterar todos os atributos daquele elemento
        PATCH: Fazer alteração pontual num atributo específico, numa linha específica
        DELETE: Apagar
    
    Para usar o método POST é necessário alguns ajustes  no código. Vá em views.py
        Importe: 
            from django.utils.decorators import method_decorator
            from django.views.decorators.csrf import csrf_exempt

        E logo antes da declaração da classe CategoriaView(View) insira:
            @method_decorator(csrf_exempt)
        
        Agora dentro da classe CategoriaView insira o método post:

                def post(self, request):
                    json_data = json.loads(request.body) # o dado que está vindo
                    nova_categoria = Categoria.objects.create(**json_data)
                    data = {"id":nova_categoria.id, "descricao":nova_categoria.descricao}
                    return JsonResponse(data)
        
        O método get da classe CategoriaView sofrerá uma alteração e ficará dessa forma:
        def get(self, request, id=None):
            if id:
                qs = Categoria.objects.get(id=id)
                data = {}
                data['id'] = qs.id
                data['descricao'] = qs.descricao
                return JsonResponse(data)
            
            data = list(Categoria.objects.values())
            formated_data = json.dumps(data, ensure_ascii=False)
            return HttpResponse(formated_data, content_type="application/json")
        
        Adicione uma url em urls.py para poder acessar um elemento do json pelo id:
            path('categorias/<int:id>/',views.CategoriaView.as_view())

22 . Métodos Patch e Delete usando class-based views:
    Em views.py crie os métodos patch e delete:

    def patch(self, request, id):
        json_data = json.loads(request.body)
        qs = Categoria.objects.get(id=id)
        qs.descricao = json_data['descricao']
        qs.save()
        data = {}
        data['id'] = qs.id
        data['descricao'] = qs.descricao
        return JsonResponse(data)
    
    def delete(self, request, id):
        qs = Categoria.objects.get(id=id)
        qs.delete()
        data = {'mensagem': "Item excluído com sucesso."}
        return JsonResponse(data)

23. Métodos Get e Post usando APIViews do Django Rest Framework
    
    No terminal digite poetry add djangorestframework. Isso fará a instalação do djangorestframework.
    Vá em settings.py e em INSTALLED_APPS adicione 'rest_framework' antes de core.
    Em views.py adicione as classes CategoriaSerializer e CategoriaList logo após CategoriaView:

    from rest_framework.response import Response
    from rest_framework.views import APIView
    from rest_framework.serializers import ModelSerializer
    .
    .
    . 
    class CategoriaSerializer(ModelSerializer):
        class Meta:
            model = Categoria
            fields = '__all__'

class CategoriasList(APIView):
    def get(self, request):
        categorias = Categoria.objects.all()
        serializer = CategoriaSerializer(categorias, many=True)
        return Response(serializer.data)
    def post(self, request):
        serializer = CategoriaSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    Agora vá até urls.py e adicione a seguinte rota:
        path('categorias-apiview/',views.CategoriaList.as_view())

24. Métodos Retrieve Patch e Delete usando APIViews do Django Rest Framework 
    
    -> Em views.py importe get_object_or_404 e crie a classe CategoriaDetail:

    class CategoriaDetail(APIView):
        def get(self, request, id):
            categoria = get_object_or_404(Categoria.objects.all(), id=id)
            serializer = CategoriaSerializer(categoria)
            return Response(serializer.data)
    def put(self, request, id):
        categoria = get_object_or_404(Categoria.objects.all(), id=id)
        serializer = CategoriaSerializer(categoria, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    def delete(self, request, id):    
        categoria = get_object_or_404(Categoria.objects.all(), id=id)
        categoria.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)

    -> Crie uma rota para essa nova view em urls.py:
        path('categorias-apiview/<int:id>/',views.CategoriaDetail.as_view()

    Observe que agora ao tentar acessar um elemento com id que não existe ele já trata
    o erro com o método get_object_or_404    

25. CRUD completo usando GenericViews do Django Rest Framework
    Existem algumas views genéricas do DRF e vamos usá-las.
    
    Primeiro em views.py importamos a view ListCreateAPIView e RetrieveUpdateDestroyAPIView:
        from rest_framework.generics import ListCreateAPIView, RetrieveUpdateDestroyAPIView
    
    Depois criaremos as classes que herdam essas views genéricas:
        class CategoriasListGeneric(ListCreateAPIView):
            queryset = Categoria.objects.all()
            serializer_class = CategoriaSerializer
        
        class CategoriaDetailGeneric(RetrieveUpdateDestroyAPIView):
            lookup_field = 'id' #altera o campo procurado de pk(padrão) para o valor que você definir
            queryset = Categoria.objects.all()
            serializer_class = CategoriaSerializer

    Crie urls para as novas views em urls.py:
        path('categorias-generic/',views.CategoriasListGeneric.as_view()),
        path('categorias-generic/<int:id>/',views.CategoriaDetailGeneric.as_view())

26. CRUD completo usando ModelViewSets do Django Rest Framework
    
    Essas views facilitam ainda mais o nosso trabalho.

    Em views importe a model ModelViewSet e crie uma classe que a herde:

    from rest_framework.viewsets import ModelViewSet

    class CategoriaViewSet(ModelViewSet):
        queryset = Categoria.objects.all()
        serializer_class = CategoriaSerializer
    
    Em urls.py import routers do djangorestframework
        from rest_framework import routers

        E adicione mais um path:

        path('',include(router.urls))# Não se esqueça de importar o include

        * Essa é a forma mais fácil de trabalhar com as operações de CRUD REstFul

27.  Reestruturação inicial das pastas para as views e serializers
    
    -> Dentro do diretório core crie um arquivo chamado serializer.py e dentro dele inclua o código:

        from rest_framework.serializers import ModelSerializer
        from core.models import Categoria

        class CategoriaSerializer(ModelSerializer):
            class Meta:
                model = Categoria
                fields = '__all__'

    Lembre-se de que esse código acima deve ser apagado do arquivo views.py
    O objetivo dessa mudança é separar em um arquivo as classes que usam serializer

    -> Agora ainda dentro de core cria uma pasta chamada "views"

    -> Dentro da pasta views crie um arquivo chamado testesIniciais:
        Pegue esse código de views.py e recorte para testesIniciais.py:
            from django.http import HttpResponse, JsonResponse

            def teste(request):
                return HttpResponse('Olá, mundo do Django')

            def teste2(request):
                data = {
                    "data":{
                        "1":"Carrinho",
                        "2":"Realizado",
                        "3":"Finalizado"
                    }
                }
                return JsonResponse(data)

    -> Dentro de views crie um novo arquivo chamado categoriaClass. O seu código
    deverá ser recortado da views.py apenas a classe CategoriaView:

        from django.utils.decorators import method_decorator
        from django.views.decorators.csrf import csrf_exempt
        from django.views import View
        from core.models import Categoria
        from django.http import HttpResponse, JsonResponse
        import json

        @method_decorator(csrf_exempt, name="dispatch")
        class CategoriaView(View):
            def get(self, request, id=None):
                if id:
                    qs = Categoria.objects.get(id=id)
                    data = {}
                    data['id'] = qs.id
                    data['descricao'] = qs.descricao
                    return JsonResponse(data)
                
                data = list(Categoria.objects.values())
                formated_data = json.dumps(data, ensure_ascii=False)
                return HttpResponse(formated_data, content_type="application/json")
            
            def post(self, request):
                json_data = json.loads(request.body) # o dado que está vindo
                nova_categoria = Categoria.objects.create(**json_data)
                data = {"id":nova_categoria.id, "descricao":nova_categoria.descricao}
                return JsonResponse(data)
            
            def patch(self, request, id):
                json_data = json.loads(request.body)
                qs = Categoria.objects.get(id=id)
                qs.descricao = json_data['descricao']
                qs.save()
                data = {}
                data['id'] = qs.id
                data['descricao'] = qs.descricao
                return JsonResponse(data)
            
            def delete(self, request, id):
                qs = Categoria.objects.get(id=id)
                qs.delete()
                data = {'mensagem': "Item excluído com sucesso."}
                return JsonResponse(data)

    -> Agora em view.py recorte as classes que herdam APIView e cole em um arquivo chamado
    categoriaApiView.py que deverá estar dentro da pasta views.

    -> Agora em view.py recorte as classes que herdam ListCreateAPIView e RetrieveUpdateDestroyAPIView 
    e cole em um arquivo chamado categoriaGeneric.py que deverá estar dentro da pasta views.

