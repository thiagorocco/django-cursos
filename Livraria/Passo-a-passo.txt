1. Instale o poetry: pip install poetry

2. Entre no diretório do projeto e digite: poetry init

3. Confirme as próximas etapas e será criado o arquivo pyproject.toml

4. Em seguida use o comando: poetry install
    Ele criará um ambiente virtual parecido com o python -m venv venv

5. Instale o django: poetry add django

6. Acesse o ambiente virtual do poetry: poetry shell

7. Inicie o projeto django: django-admin startproject nome-projeto .

8. Em settings.py recomenda-se ler um pouco a documentação:
    https://docs.djangoproject.com/en/5.0/topics/settings/
    https://docs.djangoproject.com/en/5.0/ref/settings/

    É recomendado trocar a SECRET_KEY

9. Execute o comando: python manage.py migrate
    Isso criará o banco de dados e a página de admin já estará disponível em localhost:8000/admin

10. Crie um super usuário: python manage.py createsuperuser

11. Crie um app: python manage.py startapp core. E em setting adicione o app core

12. Em core, crie essa view:
    from django.http import HttpResponse

    def teste(request):
        return HttpResponse('Olá, mundo do Django')

13. Em livraria/urls.py adicione a rota para a view teste:
    Importe a view: 
        from core import views
    E no array urlpatterns inclua a rota para teste:
        .
        .
        path('teste/',views.teste)
14. Crie uma nova view teste2 e adicione uma rota para essa também.

15. Agora vá até core/models e crie as classes Categoria, Editora, Autor e Livro:

from django.db import models
from django.contrib.auth.models import User

# Create your models here.
class Categoria(models.Model):
    descricao = models.CharField(max_length=255)
    
    def __str__(self):
        return self.descricao

class Editora(models.Model):
    nome = models.CharField(max_length=255)
    site = models.URLField()
    
    def __str__(self):
        return self.nome
    
class Autor(models.Model):
    class Meta:
        verbose_name_plural = "autores"
        
    nome = models.CharField(max_length=255)
    
    def __str__(self):
        return self.nome

class Livro(models.Model):
    
    titulo = models.CharField(max_length=255)
    ISBN = models.CharField(max_length=32)
    quantidade = models.IntegerField(default=1)
    preco = models.FloatField(default=1.0)
    categoria = models.ForeignKey(Categoria, on_delete=models.PROTECT, related_name="livros", default=1)
    editora = models.ForeignKey(Editora, on_delete=models.PROTECT, related_name="livros",default=1)
    autores = models.ManyToManyField(Autor, related_name="livros")
    
    def __str__(self):
        return "%s (%s)" %(self.titulo, self.editora)

class Compra(models.Model):
    
    class StatusCompra(models.IntegerChoices):
        CARRINHO = 1, 'Carrinho'
        REALIZADO = 2, 'Realizado'
        PAGO = 3, 'Pago'
        ENTREGUE = 4, 'Entregue'
        
    usuario = models.ForeignKey(User, on_delete=models.PROTECT, related_name="compras") 
    status = models.IntegerField(choices=StatusCompra.choices, default=StatusCompra.CARRINHO)
    
class ItensCompra(models.Model):
    compra = models.ForeignKey(Compra, on_delete=models.CASCADE, related_name="itens")   
    livro = models.ForeignKey(Livro, on_delete=models.PROTECT, related_name="+")
    quantidade = models.IntegerField()    

    


16. Execute o comando: python manage.py makemigrations
17. Em seguida execute o comando: python manage.py migrate

18. Em admin.py registre esses modelos de dados para ficarem visíveis em localhost/admin:

from django.contrib import admin
from core.models import Autor, Categoria, Compra, Editora, Livro, ItensCompra

# Register your models here.
admin.site.register(Autor)
admin.site.register(Categoria)
admin.site.register(Editora)
admin.site.register(Livro)

class ItensInline(admin.TabularInline):
    model = ItensCompra

@admin.register(Compra)
class CompraAdmin(admin.ModelAdmin):
    inlines = (ItensInline,)

19. Para a apresentação do nome plural correto(ou como você quiser) na tela do admin,
    use uma meta classe dentro da classe model que você deseja alterar:

        class Autor(models.Model):
            class Meta:
                verbose_name_plural = "autores"
            .
            .
            .    

20. Exportar dados do banco de dados no formato json
Vá em views.py e importe as bibliotecas View, Categoria e json e crie a classe CategoriaView
o código deverá ficar assim:

    from django.http import HttpResponse
    from django.views import View
    from core.models import Categoria

    import json

    def teste(request):
        return HttpResponse('Olá, mundo do Django')

    def teste2(request):
        return HttpResponse('Página 2')

    class CategoriaView(View):
        def get(self, request):
            data = list(Categoria.objects.values())
            formated_data = json.dumps(data, ensure_ascii=False)
            return HttpResponse(formated_data, content_type="application/json")
    
    Em urls.py inclua o caminho:
            path('categorias/',views.CategoriaView.as_view())
    
    Teste a url /categorias. Deverá retornar os registros no banco de dados no formato json

21. Uso do postman para testes de API
    
    Métodos HTTP:
        GET: Buscar as informações
        POST: Criar uma nova informação
        PUT: Alterar todos os atributos daquele elemento
        PATCH: Fazer alteração pontual num atributo específico, numa linha específica
        DELETE: Apagar
    
    Para usar o método POST é necessário alguns ajustes  no código. Vá em views.py
        Importe: 
            from django.utils.decorators import method_decorator
            from django.views.decorators.csrf import csrf_exempt

        E logo antes da declaração da classe CategoriaView(View) insira:
            @method_decorator(csrf_exempt)


