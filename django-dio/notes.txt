Passo a passo

# 1 AMBIENTE E HELLO WORLD

    1.1 Crie uma pasta para o projeto. Ex: django-dio;

    1.2 Crie dentro dessa pasta um ambiente virtual. python3 -m venv dev_django;

    1.3 Inicie o projeto. django-admin startproject hello_django .

    1.4 Abra o arquivo manage.py e execute-o no Pycharm. Após isso vá na opção
    acima onde está escrito manage e clique na seta em "Edit Configurations" e em
    "Parameters" insira "runserver". Agora quando você executar o manage.py ele
    vai rodar o servidor django sem a necessidade de você digitar python manage.py runserver

    1.5 Crie um app. django-admin startapp core;

    1.6 Em views.py crie uma view para renderizar o hello world:
        def hello(request, nome, idade):
            return HttpResponse('<h1>Hello, {} de {} anos</h1>'.format(nome, idade))
    1.7 Em urls.py insira a rota dessa view:
        path('hello/<nome>/<int:idade>/', views.hello),

# 2 ESTRUTURA BÁSICA DO DJANGO
    2.1 django-admin
        É o utilitário de linha de comando do Django para tarefas administrativas.
        Conheça todas as tarefas do django-admin com o comando: django-admin --help.
        O django-admin é um arquivo que fica no pacote do Django e não no pacote do
        projeto, ele existe antes do projeto ser criado.
    2.2 manage
        É um wrapper em volta do django-admin.
        Ele delega tarefas para o django-admin.
        Responsável por colocar o pacote do projeto no sys.path.
        Define a variável de ambiente DJANGO_SETTINGS_MODULE que então aponta para o arquivo settings.py.
        É gerado automaticamente junto ao projeto para facilitar o uso de comandos do django-admin(comandos administrativos)
    2.3 wsgi
        Web Server Gateway Interface(Interface de porta de entrada do servidor web)
        O Django com o comando startproject inicia uma configuração WSGI padrão para executar sua aplicação web.
        Com o comando "runserver" é iniciado um servidor web leve. Esse servidor é especificado pela configuração WSGI_APPLICATION.
        Usado apenas para desenvolvimento, para produção outros servidores são indicados.
    2.4 settings
        Responsável pelas configurações do Django.
        É possível criar apps, conexão com banco de dados, templates, time zone, cache, segurança, arquivos estáticos, etc.
    2.5 urls
        É um schema de URL.
        Responsável por gerenciar as rotas da URLS, onde é possível configurar para onde cada rota será executada.
        É uma forma limpa e elegante para gerenciar URL's
    2.6 views
        Responsável por processar e retornar uma resposta para o cliente que fez a requisição.
    2.7 models
        Define o modelo de dados inteiramente em Python.
        Faz a abstração dos objetos de banco de dados para o Python, transformando todas as tabelas em classes e os acessos são feitos utilizando a linguagem Python onde o Django realiza a transformação para SQL.
        Ex:
            class Pessoa(models.Model):
                name = models.CharField(max_length=200)
                idade = models.IntegerField()
        Ex de consulta:
            pessoa = Pessoa.objects.get(nome='Rafael')
            select * from pessoa where nome = 'Rafael';
    2.8 admin
        Interface administrativa gerada automaticamente pelo Django.
        Ele lê os metadados que estão nos models e fornece uma interface poderosa e pronta para manipulação de dados.
    2.9 static
        Responsável por armazenar os arquivos estáticos.
        CSS, Javascript, imagens
    2.10 templates
        Responsável por armazenar os arquivos HTML.
        O diretório "templates" é o diretório padrão para o armazenarmos todo o conteúdo HTML da aplicação.


BANCO DE DADOS E DJANGO ADMIN
    Desenvolveremos uma AGENDA
        -> Criar novo projeto;
        -> Criar novo app;
        -> Configurar banco de dados;
        -> Migrar tabelas padrões do Django para o banco;
        -> Acessando o Django Admin;

    Projeto
        Vamos criar uma aplicação totalmente do zero que simule uma agenda;
        A aplicação terá persistência de banco de dados;
        A aplicação deverá ser multiusuário;
        Cada usuário deverá visualizar apenas a sua agenda e não a agenda dos demais;
        A aplicação deverá contar com autenticação
    Tabelas padrões do Django
        -> O Django já possui tabelas padrões que são utilizadas principalmente para parte de segurança e autenticação.
        -> Para criar tabelas as tabelas padrão do Django use o comando migrate.
        -> Ao criar tabelas padrões do Django é necessário criar um primeiro usuário para acessar o
        painel Django Administration.
        -> Para criar um primeiro usuário usamos o comando createsuperuser.
        -> Elas consistem em auxiliar e agilizar toda parte de autenticação e também de perfis de acesso.
        -> Entre as tabelas padrões estão as tabelas de Usuário, Grupo e de Perfil.
        -> Com as tabelas padrões é possível criar usuários, grupos de usuários e definir perfis do qual usuário pode acessar determinado conteúdo.
        