1. djando-admin startproject agenda;
2. python3 manage.py startapp core;
3. Configure o interpretador(file/settings) e o manage.py runserver;
4. Crie as tabelas no banco de dados com python3 manage.py migrate
    Será criado conforme o banco de dados padrão, sqlite;
5.  python3 manage.py createsuperuser;
6. Em admin crie um usuário e marque a opção "staff status" e deixe desmarcada a opção "Superuser status".
7. EM Available user permissions marque a opção "Can view user", assim o usuario poderá ver as opções do admin mas não poderá mudá-las.
8. Crie a model Evento;
9. Registre seu app em settings.py;
10. Execute o comando python3 manage.py makemigrations core;
11. Execute o comando sqlmigrate core 001.
    Observe que ele cria a tabela evento com core na frente => core_evento:
    CREATE TABLE "core_evento" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "titulo" varchar(100) NOT NULL, "descricao" text NULL, "data_evento" datetime NOT NULL, "data_cricao" datetime NOT NULL);
    COMMIT;
12. É possível criar uma tabela sem o nome do app na frente. Para isso vá até a sua model em models.py
    e adicione uma classe Meta dentro dela da seguinte forma:
        class Meta:
            db_table = 'evento'
    Após isso apague o arquivo 0001_initial.py e execute novamente os comandos:
        python manage.py makemigrations core e python manage.py sqlmigrate core 0001.
        Agora em 0001 existe uma variável chamada options:
                     options={
                'db_table': 'evento',
            },
        E o retorno de python manage.py sqlmigrate core 0001 será esse:
            CREATE TABLE "evento" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "titulo" varchar(100) NOT NULL, "descricao" text NULL, "data_evento" datetime NOT NULL, "data_cricao" datetime NOT NULL);
        COMMIT;
13. Execute o comando: python manage.py migrate core 0001.
14. Registre o model no django admin




