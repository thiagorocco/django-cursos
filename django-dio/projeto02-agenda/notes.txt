1. djando-admin startproject agenda;
2. python3 manage.py startapp core;
3. Configure o interpretador(file/settings) e o manage.py runserver;
4. Crie as tabelas no banco de dados com python3 manage.py migrate
    Será criado conforme o banco de dados padrão, sqlite;
5.  python3 manage.py createsuperuser;
6. Em admin crie um usuário e marque a opção "staff status" e deixe desmarcada a opção "Superuser status".
7. EM Available user permissions marque a opção "Can view user", assim o usuario poderá ver as opções do admin mas não poderá mudá-las.
8. Crie a model Evento;
9. Registre seu app em settings.py;
10. Execute o comando python3 manage.py makemigrations core;
11. Execute o comando sqlmigrate core 001.
    Observe que ele cria a tabela evento com core na frente => core_evento:
    CREATE TABLE "core_evento" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "titulo" varchar(100) NOT NULL, "descricao" text NULL, "data_evento" datetime NOT NULL, "data_cricao" datetime NOT NULL);
    COMMIT;
12. É possível criar uma tabela sem o nome do app na frente. Para isso vá até a sua model em models.py
    e adicione uma classe Meta dentro dela da seguinte forma:
        class Meta:
            db_table = 'evento'
    Após isso apague o arquivo 0001_initial.py e execute novamente os comandos:
        python manage.py makemigrations core e python manage.py sqlmigrate core 0001.
        Agora em 0001 existe uma variável chamada options:
                     options={
                'db_table': 'evento',
            },
        E o retorno de python manage.py sqlmigrate core 0001 será esse:
            CREATE TABLE "evento" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "titulo" varchar(100) NOT NULL, "descricao" text NULL, "data_evento" datetime NOT NULL, "data_cricao" datetime NOT NULL);
        COMMIT;
13. Execute o comando: python manage.py migrate core 0001.
14. Registre o model no django admin. => admin.site.register(Evento)
15. No atributo data_evento adicione no parametro a seguinte declaração: verbose_name='Data do Evento'
16. Em admin.py crie essa classe:
    class EventoAdmin(admin.ModelAdmin):
        list_display = ('titulo', 'data_evento', 'data_criacao')
        # Ela fará a exibição de forma personalizada
17. Em models.py adicione esse atributo/campo à classe Evento:
        usuario = models.ForeignKey(User, on_delete=models.CASCADE)
        importe a biblioteca: from django.contrib.auth.models import User
18. Agora execute o comando python manage.py makemigrations core.
    Aparecerá um aviso informando que já existem registros sem a associação do usuário.
        Você terá 2 opções:
            1 define um valor padrão para os registros existentes automaticamente.
            2 Sair e definir manualmente um valor padrão em models.py
        Optaremos pela opção 1 e depois 1.
19. Execute o comando python manage.py sqlmigrate core 0003 e você verá as alterações feitos
    no modo sql da aplicação:
        BEGIN;
        --
        -- Add field usuario to evento
        --
        CREATE TABLE "new__evento" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "usuario_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "titulo" varchar(100) NOT NULL, "descricao" text NULL, "data_evento" datetime NOT NULL, "data_criacao" datetime NOT NULL);
        INSERT INTO "new__evento" ("id", "titulo", "descricao", "data_evento", "data_criacao", "usuario_id") SELECT "id", "titulo", "descricao", "data_evento", "data_criacao", 1 FROM "evento";
        DROP TABLE "evento";
        ALTER TABLE "new__evento" RENAME TO "evento";
        CREATE INDEX "evento_usuario_id_344a595f" ON "evento" ("usuario_id");
        COMMIT;

        Perceba que foi criada uma nova tabela(new__evento), adicionado os valores da tabela evento nela. Depois tabela evento é excluída e
        por fim new__evento é renomeada para evento e criado um indice com base no atributo usuario(usuario_id)

20 . Execute agora python manage.py migrate core ou só migrate. Acesse os registro e confira o usuário relacionado.

21. Crie filtros no admin para facilitar suas consultas no painel administrativo do django:
    Vá em admin.py e na classe EventoAdmin adicione o seguinte atributo:
        list_filter = ('usuario','data_evento')
        Agora observe que à direita da nossa página temos filtros para as nossas consultas
22. Crie o template agenda.html no diretório raiz do projeto dentro da pasta templates.
23. Crie a view lista_eventos:
    def lista_eventos(request):
        return render(request, 'agenda.html')
24. Registre o caminho da pasta templates em settings.py, em TEMPLATES dentro de DIRS insira:
    os.path.join(BASE_DIR, 'templates')
25. Vamos criar uma função na model Evento para retornar a data do evento no formato BR:
        def get_data_evento(self):
            return self.data_evento.strftime('%d/%m/%Y %H:%Mh')

26. Altera a view def lista_eventos:
    def lista_eventos(request):
        evento = Evento.objects.all()
        dados = {'eventos': evento}
        return render(request, 'agenda.html', dados)

27. No template vamos alterá-lo para exibir os dados através do looping:
    <ul>
        {% for evento in eventos %}
            <li>{{ evento.titulo }} - {{ evento.get_data_evento }}</li>
        {% endfor %}
    </ul>
28. Agora crie os arquivos html model-page, model-footer e model-header em templates.
    model-page terá o include de model-header e model-footer e deixará um bloco para que agenda.html implemente o código.

29. Crie um redirecionamento para a url vazia='' em urls.py:
    importe RedirectView => from django.views.generic import RedirectView
    E adicione a url: path('', RedirectView.as_view(url='/agenda/'))

### AUTENTICAÇÃO COM DJANGO ###
    O Django já possui um pacote de autenticação que é empacotado em django.contrib.auth.
    Ele cria tabelas de usuários e permissões, o que facilita o controle de autenticações e permissões.
    Só para ter certeza antes de usar certifique que ele está declara em INSTALLED_APPS

    Função authenticate desse pacote é a responsável por autenticar o usuário.
    Vamos à prática:
30. Em views.py declare: from django.contrib.auth.decorators import login_required
    E na view que você deseja autenticação para ser acessado insira logo acima
    da view a seguinte declaração: @login_required()

31. Crie a url path('login/', views.login_user) em urls.py.
32. Em views.py crie a view:
    def login_user(request):
        return render(request, 'login.html')
33. Altere a declaração @login_required() para @login_required(login_url='/login/')
34. Crie o template login.html
35. Crie a url 'login/submit',views.submit_login em urls.py.
36. Crie a view submit_login:
    Importe: from django.contrib.auth import authenticate, login
    def submit_login(request):
    if request.POST:
        username = request.POST.get('username')
        password = request.POST.get('password')
        usuario = authenticate(username=username, password=password)
        if usuario is not None:
            login(request, usuario)
            return redirect('/')
    else:
        redirect('/')

37. Modifique a view lista_eventos para mostrar os eventos relacionados apenas ao usuário cadastrado:
    @login_required(login_url='/login/')
    def lista_eventos(request):
        usuario = request.user
        evento = Evento.objects.filter(usuario=usuario)
        dados = {'eventos': evento}
        return render(request, 'agenda.html', dados)

38. 















