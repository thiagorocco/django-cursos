1. Baixe o repositório com o git clone:
    https://github.com/codloom/DjangoProjeto3-Immobile.git

2. Crie um ambiente virtual: python3 -m venv venv

3. Ative o ambiente virtual: . venv/bin/activate

4. Instale os requirements: pip install -r requirements.txt

5. Crie um novo app: python manage.py startapp base.

6. Registro o app em setting.py localizado em core.

7. Em base crie as pastas templates e static. Dentro de static crie 
as pastas css, image e js.

8. Dentro de static/css crie o arquivo style.css

9. Dentro de templates crie o arquivo base.html com o seguinte conteúdo:

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>{% block title %}{% endblock %}</title>

	<!-- CSS -->
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
 
	<link rel="stylesheet" href="{% static 'css/style.css' %}">
	
    </head>
    <body>  

        {% block content %}
        
        {% endblock %} 
    
        <!-- JS-->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
    </body>
    </html>

10. Na sequência execute atualizado do BD com: 
    python manage.py makemigrations e python manage.py migrate

11. Insira imagens client.jpg e imovel.png na pasta base/static/images

12. Criando os modelos:
    Em myapp/models.py crie os modelos:

    from django.db import models
    from datetime import datetime
    # Create your models here.

    ## Cadastro de Clientes     
    class Client(models.Model):
        name = models.CharField(max_length=100)
        email = models.EmailField(max_length=200)
        phone = models.CharField(max_length=15)
        
        def __str__(self):
            return "{} - {}".format(self.name, self.email)
        
        class Meta:
            verbose_name = 'Cliente'
            verbose_name_plural = 'Clientes'
            ordering = ['-id']


    ## Opções de Imóveis
    class TypeImmobile(models.TextChoices):
        APARTMENT = 'APARTAMENTO','APARTAMENTO'
        KITNET = 'KITNET','KITNET'
        HOUSE = 'CASA','CASA'



    ## Cadastro de Imóveis
    class Immobile(models.Model):
        code = models.CharField(max_length=100)
        type_item = models.CharField(max_length=100, choices=TypeImmobile.choices)
        address = models.TextField()
        price = models.DecimalField(max_digits=10,decimal_places=2)
        is_locate = models.BooleanField(default=False)
        
        
        def __str__(self):
            return "{} - {}".format(self.code, self.type_item)
        
        class Meta:
            verbose_name = 'Imóvel'
            verbose_name_plural = 'Imóveis'
            ordering = ['-id']


    ## Cadastrar as Imagens do Imóvel
    class ImmobileImage(models.Model):
        image = models.ImageField('Images',upload_to='images')
        immobile = models.ForeignKey(Immobile, related_name='immobile_images', on_delete=models.CASCADE)
    
        def __str__(self):
            return self.immobile.code



    ## Registrar Locação
    class RegisterLocation(models.Model):
        immobile = models.ForeignKey(Immobile, on_delete=models.CASCADE, related_name='reg_location')
        client = models.ForeignKey(Client, on_delete=models.CASCADE)
        dt_start = models.DateTimeField('Inicio')
        dt_end = models.DateTimeField('Fim')
        create_at = models.DateField(default=datetime.now, blank=True)
        
        def __str__(self):
            return "{} - {}".format(self.client, self.immobile)
        
        class Meta:
            verbose_name = 'Registrar Locação'
            verbose_name_plural = 'Registrar Locação'
            ordering = ['-id']

13. Envie os modelos para o banco de dados com python manage.py makemigrations e migrate

14. Registre-os em admin.py:

    admin.site.register(models.Client) 
    admin.site.register(models.RegisterLocation)

    class ImmobileImageInlineAdmin(admin.TabularInline):
    model = models.ImmobileImage
    extra = 0


    class ImmobileAdmin(admin.ModelAdmin):
        inlines = [ImmobileImageInlineAdmin]


    admin.site.register(models.Immobile, ImmobileAdmin)

15. Crie um superusuario: python manage.py createsuperuser e intereja com o banco de dados
    no django admin.

16. Listando imóveis:
    Em myapp/views.py crie as seguintes views:

    from django.shortcuts import render, redirect

    from django.db.models import Q

    from .forms import ClientForm, ImmobileForm, RegisterLocationForm
    from .models import Immobile, ImmobileImage

    # Create your views here.
    def list_location(request):
        immobiles = Immobile.objects.filter(is_locate=False)
        context = {'immobiles': immobiles}
        return render(request, 'list-location.html', context)


    def form_client(request):
        form = ClientForm()
        if request.method == 'POST':
            form = ClientForm(request.POST)
            if form.is_valid():
                form.save()
                return redirect('list-location')   
        return render(request, 'form-client.html', {'form': form})


    def form_immobile(request):
        form = ImmobileForm() 
        if request.method == 'POST':
            form = ImmobileForm(request.POST, request.FILES)
            if form.is_valid():
                immobile = form.save()
                files = request.FILES.getlist('immobile') ## pega todas as imagens
                if files:
                    for f in files:
                        ImmobileImage.objects.create( # cria instance para imagens
                            immobile=immobile, 
                            image=f)
                return redirect('list-location')   
        return render(request, 'form-immobile.html', {'form': form})



    def form_location(request, id):
        get_locate = Immobile.objects.get(id=id) ## pega objeto

        form = RegisterLocationForm()  
        if request.method == 'POST':
            form = RegisterLocationForm(request.POST)
            if form.is_valid():
                location_form = form.save(commit=False)
                location_form.immobile = get_locate ## salva id do imovel 
                location_form.save()  
                
                ## muda status do imovel para "Alugado"
                immo = Immobile.objects.get(id=id)
                immo.is_locate = True ## passa ser True
                immo.save() 

                return redirect('list-location') # Retorna para lista

        context = {'form': form, 'location': get_locate}
        return render(request, 'form-location.html', context)

    ## Relatório
    def reports(request): ## Relatórios   
        immobile = Immobile.objects.all()
        
        get_client = request.GET.get('client') 
        get_locate = request.GET.get('is_locate')
        get_type_item = request.GET.get('type_item') 

        get_dt_start = request.GET.get('dt_start')
        get_dt_end = request.GET.get('dt_end')
        print(get_dt_start, get_dt_end)

        if get_client: ## Filtra por nome e email do cliente
            immobile = Immobile.objects.filter(
                        Q(reg_location__client__name__icontains=get_client) | 
                        Q(reg_location__client__email__icontains=get_client))
        
        if get_dt_start and get_dt_end: ## Por data
            immobile = Immobile.objects.filter(
                            reg_location__create_at__range=[get_dt_start,get_dt_end])

        if get_locate:
            immobile = Immobile.objects.filter(is_locate=get_locate)

        if get_type_item:
            immobile = Immobile.objects.filter(type_item=get_type_item)

        return render(request, 'reports.html', {'immobiles':immobile})
    
    Em base/static/css/style.css insira o seguinte código:
    .cards {
    display: flex;
    flex-wrap: wrap;
    align-items: stretch;
    }
    
    .card-item {
        flex: 0 0 25rem;
        box-sizing: border-box;
        margin: 1rem 0.25em;
        border-radius: 10px;
        border: 1px solid;
    }

    .card-image {
        border-radius: 10px;
    }
    
17. Formulário de Cadastro do Cliente:
    Em app crie um arquivo chamado forms.py, 
    esse arquivo será responsável pela gravação de clientes, imóveis e locações no BD.
    e insira esse conteúdo:

    from django import forms
    from .models import Client, Immobile, RegisterLocation


    ## Cadastra Cliente    
    class ClientForm(forms.ModelForm):
        class Meta:
            model = Client
            fields = '__all__'
            
        def __init__(self, *args, **kwargs): # Adiciona 
            super().__init__(*args, **kwargs)  
            for field_name, field in self.fields.items():   
                field.widget.attrs['class'] = 'form-control'


    ## Cadastra um Imovel
    class ImmobileForm(forms.ModelForm):
        immobile = forms.ImageField(widget=forms.ClearableFileInput(attrs={'multiple': True}))
        class Meta:
            model = Immobile
            fields = '__all__'
            exclude = ('is_locate',)
            
        def __init__(self, *args, **kwargs): # Adiciona 
            super().__init__(*args, **kwargs)  
            for field_name, field in self.fields.items():   
                if field.widget.__class__ in [forms.CheckboxInput, forms.RadioSelect]:
                    field.widget.attrs['class'] = 'form-check-input'
                else:
                    field.widget.attrs['class'] = 'form-control'


    ## Registra Locação do Imovel    
    class RegisterLocationForm(forms.ModelForm):
        dt_start = forms.DateTimeField(widget=forms.DateInput(format='%d-%m-%Y',attrs={'type': 'date',}))
        dt_end = forms.DateTimeField(widget=forms.DateInput(format='%d-%m-%Y',attrs={'type': 'date',}))

        class Meta:
            model = RegisterLocation
            fields = '__all__'
            exclude = ('immobile','create_at',)
            
        def __init__(self, *args, **kwargs): # Adiciona 
            super().__init__(*args, **kwargs)  
            for field_name, field in self.fields.items():   
                field.widget.attrs['class'] = 'form-control'

18. Em myapp/templates crie o arquivo form-client.html com este código:

    {% extends 'base.html' %} 

    {% block title %}Cadastrar Cliente{% endblock %}

    {% load static %}

    {% block content %}
    <div class="container"> 
        <div class="d-flex gap-4 mt-3">
    
            <img src="{% static 'images/client.jpg' %}" class="card-image" width="100%" height="500" alt="client">
    
            <form class="col-md-4" action="{% url 'client-create' %}" method="post">
                {% csrf_token %}
                <h3>Cadastrar Cliente</h3>
                {% for field in form %}
                <div class="mt-3">
                    {{field.label}}
                    {{field}}
                </div>
                {% endfor %}
                <input type="submit" class="btn btn-primary mt-3" value="Salvar">
            </form>
            
        </div> 
    </div>
    {% endblock %}

19. Em myapp/templates crie o arquivo form-immobile.html com este código:
     {% extends 'base.html' %}

    {% block title %}Cadastrar Imóvel{% endblock %}

    {% load static %}

    {% block content %}
    <div class="container">

        <div class="d-flex gap-4 mt-3"> 
                
            <img src="{% static 'images/imovel.png' %}" class="card-image" width="100%" height="500" alt="client"> 
            
            <form class="col-md-6" action="{% url 'immobile-create' %}" method="post" 
                enctype="multipart/form-data">
                {% csrf_token %} 
                <h3>Cadastrar Imóvel</h3>
                {% for field in form %}
                <div class="mt-3">
                    {{field.label}}
                    {{field}}
                </div>
                {% endfor %} 
                <input type="submit" class="btn btn-primary mt-3" value="Salvar">
            </form>

        </div>
    
    </div>
    {% endblock %}

20. Em myapp/templates crie o arquivo form-location.html com este código:

    {% extends 'base.html' %}

    {% block title %}Cadastrar Locação{% endblock %}

    {% block content %}
    <div class="container"> 
        <div class="d-flex gap-4 mt-4">  

            <!-- Informções do Objeto Here --> 
            <div class="">
                <div id="carouselExampleControls" class="carousel slide" data-bs-ride="false">
                    <div class="carousel-inner">
                        {% for el in location.immobile_images.all %}
                        <div class="carousel-item {% if forloop.first %}active{% endif %}">
                        <img src="{{el.image.url}}" class="card-image" width="100%" height="500" alt="{{el.id}}">
                        </div>
                        {% endfor %}
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            
                <div class="mt-3">
                    <p>Codígo: {{location.code}}</p>
                    <p>Endereço: {{location.address}}</p>
                    <p>Valor: {{location.price}}</p>
                    <div class="badge bg-success">Tipo: {{location.type_item}}</div> 
                </div> 

            </div>
        

            <form class="col-md-4" action="{% url 'location-create' location.id %}" method="post">
                {% csrf_token %}
                <h3>Formulário de Registro Locação</h3>
                {% for field in form %}
                <div class="mt-3">
                    {{field.label}}
                    {{field}}
                </div>
                {% endfor %}
                <input type="submit" class="btn btn-primary mt-3" value="Locar">
            </form> 
            
        </div> 
    </div>
    {% endblock %}

21. Em settings.py existe uma propriedade chamada "LANGUAGE_CODE" e TIME_ZONE.
    Se você definir a primeira para 'pt-br' e a segunda para 'America/Sao_Paulo'
    Suas datas e horários ficaram no padrão brasileiro.

22. Navbar, Message e Templates
    Crie o arquivo navbar.html em base/templates com o seguinte conteúdo:

        <nav class="navbar navbar-expand-lg navbar-dark bg-dark">

    <div class="container-fluid">

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo03" aria-controls="navbarTogglerDemo03" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <a class="navbar-brand" href="#">Myapp</a>

        <div class="collapse navbar-collapse" id="navbarTogglerDemo03">

            <ul class="navbar-nav gap-3 mb-2 mb-lg-0 mx-auto">

                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="/">Inicio</a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" href="{% url 'reports' %}">Relatório</a>
                </li>

                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Cadastrar
                    </a>
                    <ul class="dropdown-menu dropdown-menu-dark">
                        <li>
                            <a class="dropdown-item" href="{% url 'client-create' %}">Cliente</a>
                        </li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li>
                            <a class="dropdown-item" href="{% url 'immobile-create' %}">Imóvel</a>
                        </li>
                    </ul>
                </li> 
            </ul>

            <a class="navbar-brand" href="#">@eticialima</a> 

        </div>

    </div>

</nav>

23. Em base.html dentro da tag body antes de qualquer conteúdo insira essa instrução DTL:
            {% include 'navbar.html' %}

24. Crie o arquivo message.html em base/templates com o seguinte código:

    {% if messages %}
    <div class="messages">
        {% for message in messages %}
        <div {% if message.tags %} class="alert {{ message.tags }}"{% endif %} role="alert">{{ message }}</div>
        {% endfor %}
    </div>
    {% endif %}

25. Em base.html dentro da tag body logo após o include da navbar inclua e messagem também:
        {% include 'message.html' %}

26. Vamos configurar os alertas de erro do django com classes bootstrap:
    Vá em settings.py e na última linha insira o comando:

        from django.contrib.messages import constants

        MESSAGE_TAGS = {
            constants.ERROR: 'alert-danger',
            constants.WARNING: 'alert-warning',
            constants.DEBUG: 'alert-danger',
            constants.SUCCESS: 'alert-success',
            constants.INFO: 'alert-info',
        }

27. Em myapp/templates adicione o arquivo reports.html com o seguinte código:

    {% extends 'base.html' %}

    {% block title %}Relatório{% endblock %}

    {% block content %}

    <div class="container"> 

        <div class="row g-3 align-items-center m-3 bg-light p-3"> 

            <!-- Pesquisar pelo nome ou e-mail do cliente -->
            <div class="col-auto">  
                <label>Nome do Cliente ou E-mail</label>
                <form class="d-flex" action="{% url 'reports' %}">
                    <input name="client" type="search" class="form-control me-2" placeholder="Pesquisar por cliente..." aria-label="Search">
                    <button class="btn btn-success" type="submit"><i class="fas fa-search"></i></button>
                </form> 
            </div>

            <!-- Filter por Intervalo de data -->
            <div class="col-auto">  
                <form class="d-flex align-items-end" action="{% url 'reports' %}"> 
                    <div class="">
                        <label for="">Inicio</label>
                        <input name="dt_start" type="date" value="{{request.GET.dt_start}}" class="form-control me-2"> 
                    </div>
                    <div class="">
                        <label for="">Final</label>
                        <input name="dt_end" type="date" value="{{request.GET.dt_end}}" class="form-control me-2"> 
                    </div>
                    <div class="">
                        <button class="btn btn-outline-dark" type="submit"><i class="fas fa-filter"></i></button> 
                    </div>
                </form> 
            </div>


            <!-- Filtrar pelo status do imóvel se está locado ou não locado -->
            <div class="col-auto">
                <form action="{% url 'reports' %}">
                    <label>Status Locação</label>
                    <select name="is_locate" class="form-select" onchange="this.form.submit()">
                        <option></option> 
                        <option value="True" {% if request.GET.is_locate == 'True' %}selected{% endif %}>LOCADO</option>
                        <option value="False" {% if request.GET.is_locate == 'False' %}selected{% endif %}>NÃO LOCADO</option> 
                    </select>
                </form>
            </div>

            <!-- Filter pelo tipo de imóvel -->
            <div class="col-auto">
                <form class="" action="{% url 'reports' %}">
                <label>Tipo de Imóvel</label>
                    <select name="type_item" class="form-select" onchange="this.form.submit()">
                        <option></option> 
                        <option value="APARTAMENTO" {% if request.GET.type_item == 'APARTAMENTO' %}selected{% endif %}>APARTAMENTO</option>
                        <option value="KITNET" {% if request.GET.type_item == 'KITNET' %}selected{% endif %}>KITNET</option>
                        <option value="CASA" {% if request.GET.type_item == 'CASA' %}selected{% endif %}>CASA</option>
                    </select>
                </form> 
            </div>
        
            <!-- Resetar estado dos filtros -->
            <div class="col-auto"> 
                <a class="btn btn-danger" href="{% url 'reports' %}"><i class="fas fa-window-close"></i></a>
            </div>  
            
        </div>


        <!-- Tabela com todas informações de Registro de Locação -->
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Registro Inicial</th>
                    <th scope="col">Registro Final</th>
                    <th scope="col">Cliente</th>
                    <th scope="col">Codigo</th>
                    <th scope="col">Imovel</th>
                    <th scope="col">Valor</th>
                    <th scope="col">Locado</th>
                </tr>
            </thead>
            <tbody>
                {% for immobile in immobiles %}
                <tr>
                    <td scope="row">{{immobile.id}}</td>

                    <td scope="row">{% for location in immobile.reg_location.all %}{{location.dt_start|date:"d/m/Y"}}{% endfor %}</td>
                    <td scope="row">{% for location in immobile.reg_location.all %}{{location.dt_end|date:"d/m/Y"}}{% endfor %}</td>
                    <td scope="row">{% for location in immobile.reg_location.all %}{{location.client}}{% endfor %}</td>

                    <td scope="row">{{immobile.code}}</td>
                    <td scope="row">{{immobile.type_item}}</td>
                    <td scope="row">R$ {{immobile.price}}</td>

                    <td scope="row">
                        {% if immobile.is_locate == True %}
                        <i class="fas fa-check-circle fa-2x link-success"></i>
                        {% else %}
                        <i class="fas fa-minus-circle fa-2x link-danger"></i>
                        {% endif %} 
                    </td>

                </tr>  
                {% endfor %}
            </tbody>
        </table> 
    </div>

    {% endblock %}

28. Em base/templates/base.html adicione a logo após a folha de estilo do bootstrap esse tag do 
fontawesome:
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm" crossorigin="anonymous"/>

29. Atenção ao poderoso recurso do Django para filtrar relatórios, a biblioteca Q:
    from django.db.models import Q

    Quando você usar a propriedade filter de models, usar a biblioteca Q junto resultará
    em consultas SQL complexas com pouco código.